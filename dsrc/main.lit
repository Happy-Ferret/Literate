@code_type d .d
@comment_type // %s
@compiler make debug -C ..
@error_format .*/%f\(%l,%s\):%s: %m

@title Main

@s Introduction

This file contains the source code for `main.d` the file which contains the
main function for Literate. This will parse any arguments, show help text
and finally run tangle or weave (or both) on any input files.

Here is an overview:

--- main.d
@{Imports}
@{Globals}
@{Modifiers}

@{getLinenums function}

void main(in string[] args) {
    string[] files = [];

    @{Parse the arguments}

    @{Run Literate}
}
---

@s Parsing the Arguments

The arguments will consist of either flags or input files. The flags Literate
accepts are:

* `--help       -h`          Show the help text
* `--tangle     -t`          Only run tangle
* `--weave      -w`          Only run weave
* `--no-output`              Do not generate any output
* `--out-dir    -odir DIR`   Put the generated files in DIR
* `--compiler`               Don't ignore the `@compiler` command

All other inputs are input files.

We also need some variables to store these flags in, and they should be global
so that the rest of the program can access them.

--- Globals
bool tangleOnly;
bool isBook;
bool weaveOnly;
bool noOutput;
bool noCompCmd = true;
bool tangleErrors;
bool stdin;
string outDir = "."; // Default is current directory
---

This program uses a number of block modifiers in order to facilitate certain functionality.
i.e. If you don't wish a code block to be woven into the final HTML then the `noWeave` 
modifier will indicate this for you.

Each modifier is represented by this list of enums:

--- Modifiers
enum Modifier {
    noWeave,
    noTangle,
    additive, //+=
    redef // :=
}
---

Now, to actually parse the arguments:

--- Parse the arguments
for (int i = 1; i < args.length; i++) {
    auto arg = args[i];
    if (arg == "--help" || arg == "-h") {
        writeln("Lit: Literate Programming System\n"
                "\n"
                "Usage: lit [options] <inputs>\n"
                "\n"
                "Options:\n"
                "--help    -h          Show this help text\n"
                "--tangle  -t          Only compile code files\n"
                "--weave   -w          Only compile HTML files\n"
                "--no-output           Do not generate any output files\n"
                "--out-dir -odir DIR   Put the generated files in DIR\n"
                "--compiler            Report compiler errors (needs @compiler to be defined)"
               );
        return;
    } else if (arg == "--tangle" || arg == "-t") {
        tangleOnly = true;
    } else if (arg == "--weave" || arg == "-w") {
        weaveOnly = true;
    } else if (arg == "--no-output") {
        noOutput = true;
    } else if (arg == "--out-dir" || arg == "-odir") {
        if (i == args.length - 1) {
            writeln("No output directory provided.");
            return;
        }
        outDir = args[++i];
    } else if (arg == "--compiler") {
        noCompCmd = false;
        noOutput = true;
    } else if (arg == "--book" || arg == "-b") {
        // Book feature is a work in progress and undocumented for now
        isBook = true;
    } else if (arg == "-") {
        stdin = true;
    } else {
        files ~= arg;
    }
}
---

@s Run Literate

To run literate we go through every file that was passed in, check if it exists,
and run tangle and weave on it (unless `tangleOnly` or `weaveOnly` was specified).

--- Run Literate
if (files.length > 0) {
    foreach (filename; files) {
        if (!filename.exists()) {
            writeln("File ", filename, " does not exist!");
            continue;
        }
        File f = File(filename);
        string fileSrc = readall(f);

        Program p;
        if (isBook) {
            p = new Program();
            p.file = filename;
            p = parseProgram(p, fileSrc);
        } else {
            p = new Program();
            p.file = filename;
            Chapter c = new Chapter();
            c.file = filename;
            c.majorNum = 1; c.minorNum = 0;

            c = parseChapter(c, fileSrc);
            p.chapters ~= c;
        }

        if (!weaveOnly) {
            tangle(p);
        }

        if (!tangleOnly) {
            weave(p);
        }

        if (!noCompCmd && !tangleErrors && !weaveOnly) {
            @{Check for compiler errors}
        }
    }
}
---

In addition, we also accept input from stdin if no files were specified.

--- Run Literate +=
else if (stdin) {
    string stdinSrc = readall();

    Program p;
    if (isBook) {
        p = new Program();
        p.file = "stdin";
        p = parseProgram(p, stdinSrc);
    } else {
        p = new Program();
        p.file = "stdin";
        Chapter c = new Chapter();
        c.file = "stdin";
        c.majorNum = 1; c.minorNum = 0;

        c = parseChapter(c, stdinSrc);
        p.chapters ~= c;
    }

    if (!weaveOnly) {
        tangle(p);
    }

    if (!tangleOnly) {
        weave(p);
    }

    if (!noCompCmd) {
        @{Check for compiler errors}
    }
}
---

If there was no `-` argument for stdin, just print the help text.

--- Run Literate +=
else  {
    writeln("Lit: Literate Programming System\n"
            "\n"
            "Usage: lit [options] <inputs>\n"
            "\n"
            "Options:\n"
            "--help    -h          Show this help text\n"
            "--tangle  -t          Only compile code files\n"
            "--weave   -w          Only compile HTML files\n"
            "--no-output           Do not generate any output files\n"
            "--out-dir -odir DIR   Put the generated files in DIR\n"
            "--compiler            Report compiler errors (needs @compiler to be defined)"
           );
}
---

--- Check for compiler errors
Line[][string] codeLinenums;

Block[string] rootCodeblocks;
Block[string] codeblocks;
getCodeblocks(p, codeblocks, rootCodeblocks);

foreach (b; rootCodeblocks) {
    codeLinenums = getLinenums(codeblocks, b.name, b.name, codeLinenums);
}

string compilerCmd;
string errorFormat;
foreach (cmd; p.commands) {
    if (cmd.name == "@compiler") {
        compilerCmd = cmd.args;
    } else if (cmd.name == "@error_format") {
        errorFormat = cmd.args;
    }
}
if (p.chapters.length == 1) {
    Chapter c = p.chapters[0];
    foreach (cmd; c.commands) {
        if (cmd.name == "@compiler") {
            compilerCmd = cmd.args;
        } else if (cmd.name == "@error_format") {
            errorFormat = cmd.args;
        }
    }
}
if (errorFormat is null) {
    if (compilerCmd.indexOf("clang") != -1) { errorFormat = "%f:%l:%s: %s: %m"; }
    else if (compilerCmd.indexOf("gcc") != -1) { errorFormat = "%f:%l:%s: %s: %m"; }
    else if (compilerCmd.indexOf("g++") != -1) { errorFormat = "%f:%l:%s: %s: %m"; }
    else if (compilerCmd.indexOf("javac") != -1) { errorFormat = "%f:%l: %s: %m"; }
    else if (compilerCmd.indexOf("pyflakes") != -1) { errorFormat = "%f:%l:(%s:)? %m"; }
    else if (compilerCmd.indexOf("jshint") != -1) { errorFormat = "%f: line %l,%s, %m"; }
    else if (compilerCmd.indexOf("dmd") != -1) { errorFormat = "%f\\(%l\\):%s: %m"; }
}

if (errorFormat !is null) {
    if (errorFormat.indexOf("%l") != -1 && errorFormat.indexOf("%f") != -1 && errorFormat.indexOf("%m") != -1) {
        writeln(compilerCmd);
        auto output = executeShell(compilerCmd).output.split("\n");
        int i = 0;
        foreach (line; output) {
            auto matches = matchFirst(line, regex("^" ~ errorFormat.replaceAll(regex("%s"), ".*?")
                                                             .replaceAll(regex("%l"), "(?P<linenum>\\d+?)")
                                                             .replaceAll(regex("%f"), "(?P<filename>.*?)")
                                                             .replaceAll(regex("%m"), "(?P<message>.*?)") ~ "$"));


            string linenum = matches["linenum"];
            string fname = matches["filename"];
            string message = matches["message"];

            if (linenum != "" && fname != "") {
                if (codeLinenums[fname].length > to!int(linenum)) {
                    auto codeline = codeLinenums[fname][to!int(linenum) - 1];
                    error(codeline.file, codeline.lineNum, message);
                } else {
                    auto codeline = codeLinenums[fname][codeLinenums[fname].length - 2];
                    error(codeline.file, codeline.lineNum, message);
                }
            } else {
                if (!(line == "" && i == output.length - 1)) {
                    writeln(line);
                }
            }
            i++;
        }
    }
}
---

--- getLinenums function
Line[][string] getLinenums(Block[string] codeblocks, string blockName, 
                 string rootName, Line[][string] codeLinenums) {
    Block block = codeblocks[blockName];

    if (block.commentString != "") {
        codeLinenums[rootName] ~= new Line("comment", "", 0);
    }

    foreach (lineObj; block.lines) {
        string line = lineObj.text;
        string stripLine = strip(line);
        if (stripLine.startsWith("@{") && stripLine.endsWith("}")) {
            auto index = stripLine.length - 1;
            auto newBlockName = stripLine[2..index];
            getLinenums(codeblocks, newBlockName, rootName, codeLinenums);
        } else {
            codeLinenums[rootName] ~= lineObj;
        }
    }
    codeLinenums[rootName] ~= new Line("", "", 0);

    return codeLinenums;
}
---

Finally, we also have to add the imports.

--- Imports
import parser;
import tangler;
import weaver;
import util;
import std.stdio;
import std.file;
import std.string;
import std.process;
import std.regex;
import std.conv;
---
